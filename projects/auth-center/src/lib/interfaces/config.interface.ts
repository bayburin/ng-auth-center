/**
 * Настройки хранилища JWT
 */
export interface IStorageNaming {
  /**
   * Имя атрибута "jwt" в хранилище
   */
  jwt: string;

  /**
   * Имя атрибута "state" в хранилище
   */
  state: string;

  /**
   * Имя атрибута "returnUrl" в хранилище
   */
  returnUrl: string;
}

/**
 * Настойки JWT
 */
export interface IJwtOptions {
  /**
   * Список доменов, для которых будет добавляться заголовок "Authorization" с содержимым "Bearer <JWT>"
   */
  allowedDomains: string[];

  /**
   * Список адресов, для которых НЕ будет добавляться заголовок "Authorization"
   */
  disallowedRoutes: string[];
}

/**
 * Конфигурация библиотеки авторизации
 */
export interface IConfig {
  /**
   * Адрес сервера авторизации
   */
  authorizationServer?: string;

  /**
   * Адрес вашего сервера, который вернет вам JWT
   */
  serverUrl: string;

  /**
   * ID вашего приложения, выданный сервером авторизации
   */
  clientId: string;

  /**
   * Запрашиваемый тип разрешения, может быть одним из следующих параметров (по умолчанию code):
   * 1. code - для запроса кода авторизации;
   * 2. token - для запроса токена доступа;
   */
  responseType?: string;

  /**
   * Используется для безопасности. Если его отправить, сервер авторизации вернет его обратно, чтобы вы могли убедиться,
   * что это ответ именно на ваш запрос (по умолчанию пустая строка)
   */
  state?: string;

  /**
   * Адрес, на который будет перенаправлен пользователь после успешной авторизации на сервере авторизации.
   * Внимание! Не используйте в качестве корневого маршрута путь "/"
   */
  redirectUrl: string;

  /**
   * Список разрешений, необходимых приложению (по умолчанию пустой). Указывать через запятую без пробелов.
   */
  scope?: string;

  /**
   * Имя приложения которое будет отображаться на странице входа
   */
  appName: string;

  /**
   * Настройки хранилища JWT
   */
  storageNaming?: IStorageNaming;

  /**
   * Настойки JWT
   */
  jwtOptions?: IJwtOptions;
}
